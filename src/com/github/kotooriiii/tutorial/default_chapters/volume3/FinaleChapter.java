package com.github.kotooriiii.tutorial.default_chapters.volume3;import com.github.kotooriiii.LostShardPlugin;import com.github.kotooriiii.tutorial.AbstractChapter;import com.gmail.filoghost.holographicdisplays.api.Hologram;import com.gmail.filoghost.holographicdisplays.api.HologramsAPI;import org.bukkit.Bukkit;import org.bukkit.Location;import org.bukkit.Material;import org.bukkit.Sound;import org.bukkit.block.Block;import org.bukkit.block.BlockFace;import org.bukkit.entity.Player;import org.bukkit.event.EventHandler;import org.bukkit.event.player.PlayerPortalEvent;import org.bukkit.scheduler.BukkitRunnable;import org.bukkit.scheduler.BukkitTask;import java.util.Random;public class FinaleChapter extends AbstractChapter {    private Block block;    private Hologram hologram;    private BukkitTask task;    private static final Location[] predeterminedPortals = new Location[]            {                    new Location(LostShardPlugin.getTutorialManager().getTutorialWorld(), 975, 84, 745),                    new Location(LostShardPlugin.getTutorialManager().getTutorialWorld(), 965, 84, 746),                    new Location(LostShardPlugin.getTutorialManager().getTutorialWorld(), 966, 84, 740),                    new Location(LostShardPlugin.getTutorialManager().getTutorialWorld(), 991, 81, 738),                    new Location(LostShardPlugin.getTutorialManager().getTutorialWorld(), 988, 84, 744),                    new Location(LostShardPlugin.getTutorialManager().getTutorialWorld(), 992, 84, 749),                    new Location(LostShardPlugin.getTutorialManager().getTutorialWorld(), 992, 81, 754),            };    @Override    public void onBegin() {        final Player player = Bukkit.getPlayer(getUUID());        if (player == null)            return;        sendMessage(player, "You're all set for Lostshard!\nTime to take the skills you've learned into the real server!\nYour last thing to do is to look for the portal to get you there.", ChapterMessageType.HOLOGRAM_TO_TEXT);        new BukkitRunnable() {            @Override            public void run() {                spawn(player.getLocation());            }        }.runTaskLater(LostShardPlugin.plugin, DELAY_TICK);    }    private void spawn(Location location) {        final int RANGE = 50;        final int HEIGHT = 10;        boolean isValid = false;        int index = -1;        whileLoop:        while (!isValid) {            Location possiblePortalLocation;            if (index < predeterminedPortals.length) {                if (index == -1) {                    possiblePortalLocation = predeterminedPortals[new Random().nextInt(predeterminedPortals.length)];                    index++;                } else {                    possiblePortalLocation = predeterminedPortals[index++];                }            } else {                int x = new Random().nextInt(RANGE * 2 + 1) - RANGE;                int z = new Random().nextInt(RANGE * 2 + 1) - RANGE;                possiblePortalLocation = new Location(location.getWorld(), location.getBlockX() + x, location.getBlockY() - HEIGHT, location.getBlockZ() + z);            }            for (int i = 0; i < HEIGHT * 2; i++) {                Block attempt = possiblePortalLocation.getBlock();                if (attempt.getRelative(BlockFace.DOWN).getType() != Material.SPRUCE_PLANKS || attempt.getType() != Material.AIR || attempt.getRelative(BlockFace.UP).getType() != Material.AIR || possiblePortalLocation.getY() <= 0.0f) {                    possiblePortalLocation.setY(possiblePortalLocation.getBlockY() + 1);                    continue;                }                isValid = true;                this.block = attempt;                this.block.getLocation().getWorld().playSound(this.block.getLocation(), Sound.BLOCK_BELL_RESONATE, 10.0f, 0f);                this.block.setType(Material.NETHER_PORTAL);                this.block.getRelative(BlockFace.UP).setType(Material.NETHER_PORTAL);                Location hLoc = this.block.getRelative(BlockFace.UP).getRelative(BlockFace.UP).getLocation();                hologram = HologramsAPI.createHologram(LostShardPlugin.plugin, hLoc.clone().add(0.5, 0.5, 0.5));                hologram.getVisibilityManager().setVisibleByDefault(true);                hologram.appendTextLine("[PORTAL]");                task = new BukkitRunnable() {                    @Override                    public void run() {                        if (isCancelled())                            return;                        onDestroy();                        setComplete();                    }                }.runTaskLater(LostShardPlugin.plugin, 20 * 45);                break whileLoop;            }        }    }    @Override    public void onDestroy() {        if (hologram != null)            hologram.delete();        if (block == null)            return;        final Block upBlock = block.getRelative(BlockFace.UP);        if (upBlock.getType() == Material.NETHER_PORTAL)            upBlock.setType(Material.AIR);        if (block.getType() == Material.NETHER_PORTAL)            block.setType(Material.AIR);    }    @EventHandler    public void onPortal(PlayerPortalEvent event) {        if (!event.getPlayer().getUniqueId().equals(getUUID()))            return;        if (!isActive())            return;        if (task != null)            task.cancel();        LostShardPlugin.getTutorialManager().wrap(getUUID()).setComplete(true);        setComplete();        event.setCancelled(true);    }}