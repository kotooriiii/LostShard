package com.github.kotooriiii.tutorial.default_chapters.volume3;import com.github.kotooriiii.LostShardPlugin;import com.github.kotooriiii.tutorial.AbstractChapter;import org.bukkit.Bukkit;import org.bukkit.Location;import org.bukkit.Material;import org.bukkit.block.Block;import org.bukkit.block.BlockFace;import org.bukkit.entity.Player;import org.bukkit.event.EventHandler;import org.bukkit.event.player.PlayerPortalEvent;import org.bukkit.scheduler.BukkitRunnable;import java.util.Random;public class FinaleChapter extends AbstractChapter {    private Block block;    @Override    public void onBegin() {        final Player player = Bukkit.getPlayer(getUUID());        if (player == null)            return;        sendMessage(player, "You're all set for Lostshard!\nTime to take the skills you've learned into the real server!\nYour last thing to do is to look for the portal to get you there.");        new BukkitRunnable() {            @Override            public void run() {                spawn(player.getLocation());            }        }.runTaskLater(LostShardPlugin.plugin, DELAY_TICK);    }    private void spawn(Location location) {        final int RANGE = 10;        final int HEIGHT = 25;        boolean isValid = false;        whileLoop:        while (!isValid) {            int x = new Random().nextInt(RANGE * 2 + 1) - RANGE;            int z = new Random().nextInt(RANGE * 2 + 1) - RANGE;            Location possiblePortalLocation = new Location(location.getWorld(), location.getBlockX() + x, location.getBlockY() - HEIGHT, location.getBlockZ() + z);            for (int i = 0; i < HEIGHT * 2; i++) {                possiblePortalLocation.setY(possiblePortalLocation.getBlockY() + 1);                Block attempt = possiblePortalLocation.getBlock();                if (attempt.getType() != Material.AIR || attempt.getRelative(BlockFace.UP).getType() != Material.AIR || possiblePortalLocation.getY() <= 0.0f)                    continue;                isValid = true;                this.block = attempt;                this.block.setType(Material.NETHER_PORTAL);                this.block.getRelative(BlockFace.UP).setType(Material.NETHER_PORTAL);                break whileLoop;            }        }    }    @Override    public void onDestroy() {        if (block == null)            return;        final Block upBlock = block.getRelative(BlockFace.UP);        if (upBlock.getType() == Material.NETHER_PORTAL)            upBlock.setType(Material.AIR);        if (block.getType() == Material.NETHER_PORTAL)            block.setType(Material.AIR);    }    @EventHandler    public void onPortal(PlayerPortalEvent event) {        if (!event.getPlayer().getUniqueId().equals(getUUID()))            return;        if (!isActive())            return;        setComplete();        event.setCancelled(true);    }}